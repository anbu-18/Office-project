import sqlite3
from flask import jsonify
import json


class malwaredetect():

####################### DB Connection ########################################
    def __init__(self):
        try:
            self.conn =  sqlite3.connect('test.db')
            self.c = self.conn.cursor()
        except:
            return "Error while connecting DB"
        
####################### Table Creation #######################################
    def table_creation(self):
        try:
            self.c.execute('CREATE TABLE IF NOT EXISTS urlcollection(urls TEXT)')
        except:
            return "Error while creating table"

####################### insert data into database ############################
    def table_values(self,urldata):
        try:
            url = urldata['url']
            self.c.execute("INSERT INTO urlcollection VALUES ('"+url+"')")
            self.conn.commit()
            self.c.close()
            self.conn.close()
            return "inserted successfully"
        except:
            return "Error while enter the values into the DB"
    
######################### fetching all values from a DB ######################
    
    def getallvalues(self):
        try:
            self.c.execute("SELECT * from urlcollection")
            val = self.c.fetchall()
            jsss = json.dumps(val)
            self.c.close()
            self.conn.close()
            return jsss
        except:
            return "Error while fetching data"


########################## To check whether URL is available in DB , if yes return block else allow ############
    def detection(self,urldata):
        try:
            url = urldata['url']
            self.c.execute("SELECT COUNT(*) from urlcollection where urls = '"+url+"'")
            count = self.c.fetchone()
            if count[0] == 0:
                response = jsonify({"status":"Allow"})
                return response
            else:
                response = jsonify({"status":"Blocked"})
                return response
        except:
            return "Error while finding URL in DB"
            
############################ Clear the database ###############################
    def deleteall(self):
        try:
            self.c.execute("Delete from urlcollection")
            self.conn.commit()
            return "Deleted Successfully"
        except:
            return "Error while clearing values"
        
        
